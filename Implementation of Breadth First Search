#include <stdio.h>
        while (temp != NULL) {
            int adjVertex = temp->vertex;

            // If the adjacent vertex has not been visited, mark it and enqueue it
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                enqueue(adjVertex);
            }
            temp = temp->next;
        }
    }
}
int main() {
    int n, E, s, d, i, v;
    GNODE p, q;
    
    // Initialize the graph
    for (i = 0; i < MAX; i++) {
        graph[i] = NULL;
        visited[i] = 0;
    }

    printf("Enter no of vertices: ");
    scanf("%d", &n);
    printf("Enter no of edges: ");
    scanf("%d", &E);

    for (i = 1; i <= E; i++) {
        printf("Enter source: ");
        scanf("%d", &s);
        printf("Enter destination: ");
        scanf("%d", &d);

        // Create a new node for the destination
        q = (GNODE)malloc(sizeof(struct node));
        q->vertex = d;
        q->next = NULL;

        // Add the node to the adjacency list for the source
        if (graph[s] == NULL) {
            graph[s] = q;
        } else {
            p = graph[s];
            while (p->next != NULL) {
                p = p->next;
            }
            p->next = q;
        }
    }

    printf("Enter Start Vertex for BFS: ");
    scanf("%d", &v);
    printf("BFS of graph: ");
    BFS(v);
    printf("\n");

    return 0;
}

